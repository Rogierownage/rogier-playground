WHERE can be used to filter the results of a query. Some possible operators are = > >= < <= <>
LIKE can also be used. See the section for LIKE.
Note that WHERE is not case-sensitive.

AS can be used to create a alias for a result. For example you can do a CONCAT and then AS to name it something helpful.
You can order by an alias, you can group by it, but you cannot use it in a WHERE.

SUBSTRING can be used to get a part of a string. The second parameter is the starting position, and the third parameter is the length.
Example: SUBSTRING('Hello', 1, 3) // Hel
If the second parameter is negative, it starts counting from the end of the string. Then it moves forwards as normal.
If the third parameter is omitted, the entire rest of the string is returned. The third parameter can not be negative.

CONCAT can be used to concatenate multiple strings together. Use commas between each string. Accepts any amount of strings.

REPLACE can be used to do a search-replace in a string. The second parameter is the value to search for, and the third parameter is the value to replace it with.

REVERSE will simply reverse a string, putting it in the reverse order.

CHAR_LENGTH will return the length of a string.
LENGTH will return the length in bytes.

UPPER (or UCASE) will make a string uppercase
LOWER (or LCASE) will make a string lowercase

INSERT will add a string inside another string.
The first parameter is the original string.
The second parameter is the position to start adding from. I don't think this can be negative.
The third parameter is how many characters to remove. 0 to remove nothing. -1 to remove everything.
The fourth parameter is the string to insert into it.
For example, select INSERT('Hello there', 7, 2, 'wh') returns 'Hello where'

LEFT returns the left-most part of a string. The second parameter is how many characters.
RIGHT returns the right-most part of a string.

REPEAT takes a string and repeats it a number of times. The second parameter is how many times to repeat it.
Note: "Repeating" 1 time is equal to just keeping the original string.

TRIM removes a specific character from the beginning/end/both of a string. The default is the space character.
This has pretty weird syntax. Some examples:
TRIM(LEADING 'x' from name)
TRIM(BOTH '    ' from email)
TRIM(TRAILING '-' from zipcode)

DISTINCT can be used to remove duplicate columns. It comes right after the SELECT keyword.
It takes all the fields that you select, and applies the uniqueness on the combination of all of them.
For example, `select DISTINCT name, email from users` only removes records where both the `name` and `email` are the same. 
Note that DISTINCT is not a function. It can be used with parenthesis, but this is undocumented and confusing syntax, even though it sometimes will work.

ORDER BY is used to sort the results by one or more columns.
ASC or DESC can be put after the column to set the order.
A number can be given instead of a column. This sorts by the column that comes n-th in the results, but this is not recommended.
You can also order by an alias. (When you do select x as y)
If you give multiple columns (Each with their own order, optionally), it will nest the sorting. If you give two columns for example, it will sort by the first column, and then within that, it sorts by the second column. The earliest takes the most priority.

LIMIT n will limit the number of results to n rows. This is most useful when combined with sorting.
This comes quite late in the query, after order by usually.
You can also use OFFSET with LIMIT in order to skip the first n columns. You can not use OFFSET without LIMIT.
Finally, there is a shorthand syntax for LIMIT OFFSET, where you give 2 numbers to limit. The first number will be the offset in this case.

LIKE can be used instead of an equals sign in a WHERE clause. This allows you to use percentage signs as wildcards.
You can also use underscores to mean "Exactly 1 character".
You can escape these with backslashes.
Note that '%' does not match NULL

-----

GROUP BY combines similar data into single rows. You can specify a column and it will form groups of rows where each group shares the value for that row. Then you can perform aggregate functions on each group, like COUNT of AVG.

Aggregate functions are functions that operate on multiple rows at once.
They are usually used with GROUP BY. But they can also be used without GROUP BY, and that will treat the entire result as 1 group.

COUNT is an aggregate function that gives you a count of the number of rows that have a value for the given column.
It does not count NULL values. But it does count 0 values.
You can do COUNT(*) to count all the rows. This even counts rows with all values NULL.
By adding distinct before the column, you can count distinct values. Note that you cannot add distinct before *

MIN and MAX are self-explanatory. They find the lowest and highest values respectively in a group.

HAVING is like WHERE but for aggregates.

-----

Subqueries are queries that are used within other queries. The subquery returns a value and then that value is used in the bigger query.
The subquery must have only one resulting row, so usually you want to do an aggregate function without a GROUP BY.