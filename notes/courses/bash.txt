#!/bin/bash
Is called a shebang and determines what shell is used to interpret the script

ps -fp 9000
Examine the process with PID 9000

ps -ef
Show all the commands executed by the shell

Variables:
variableName="value"
Assign variable
variableName=$(command)
Assign the output of a command
variableName=`command`
Old syntax for assigning the output of a command
echo $variableName
Echo a variable
echo "$variableName"
Echo a variable as part of a string
echo "${variableName}"
Echo a variable as part of a string, with more control
Variables can have letters (upper and lower), digits, underscores. But not dashes, atsigns, or starting with digits

Tests:
A test is a conditional that checks if a value is true
[ condition-to-test-for ]
[ -e /etc/passwd ]
File operators:
-d FILE - file is a directory
-e FILE - file exists
-f FILE - file exists and is a regular file (not a symlink for example)
-r FILE - file is readable by you
-s FILE - file exists and is not empty
-w FILE - file is writable by you
-x FILE - file is executable by you
String operators:
-z STRING - string is empty
-n STRING - string is not empty
STRING1 = STRING2 - strings are equal
STRING1 != STRING2 - strings are not equal
Arithmetic operators:
arg1 -eq arg2
arg1 -ne arg2
arg1 -lt arg2
arg1 -le arg2
arg1 -gt arg2
arg1 -ge arg2

For loops:
Perform an action for a list of items

Arrays:
Define arrays like this:
varName=(1 2 3 "Test")

Exit status:
Every time a command is executed it returns an exit status (return code / exit code)
ranges from 0-255
0 = success
nonzero = error
nonzero error codes mean different things for different commands. They are not generalized.
Check the man page of a command to see what each error code means for that command
variable $? contains the exit code of the previously executed command
You can return an exit code by using the exit command. For example: exit 1
If you do not use exit, or you use it without a number, then the exit code of the last command is returned.

Using AND / OR to execute commands
if && is used, the next command will only execute if the previous command returns 0 exit code
if || is used, the next command will only execute if the previous command returns nonzero exit code
if ; is used, all commands will always run.

Redirections
echo "text" > file.txt
Sends text to the file
1> sends only stdout and is the default for >
2> sends only stderr
&> sends both stdout and stderr and can be used to completely silence a command. For example: ping -c 1 "$host" &> /dev/null
Finally, 0 would be stdin but is not relevant in this context.
